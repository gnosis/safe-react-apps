{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport InterfaceRepository from './interfaceRepository';\nimport { rpcUrlGetterByNetwork } from '../../utils';\nexport default function useServices(network) {\n  _s();\n\n  const [web3, setWeb3] = useState();\n  const [interfaceRepo, setInterfaceRepo] = useState();\n  useEffect(() => {\n    if (!network) {\n      return;\n    }\n\n    const rpcUrlGetter = rpcUrlGetterByNetwork[network];\n\n    if (!rpcUrlGetter) {\n      throw Error(`RPC URL not defined for network ${network}`);\n    }\n\n    const rpcUrl = rpcUrlGetter(process.env.REACT_APP_RPC_TOKEN);\n    const web3Instance = new Web3(rpcUrl);\n    const interfaceRepo = new InterfaceRepository(network, web3Instance);\n    setWeb3(web3Instance);\n    setInterfaceRepo(interfaceRepo);\n  }, [network]);\n  return {\n    web3,\n    interfaceRepo\n  };\n}\n\n_s(useServices, \"4gkrKod3wTk5cNzg7o1EvXRgrr4=\");","map":{"version":3,"sources":["/Users/mdastugu/Projects/safe-react-apps/apps/tx-builder/src/hooks/useServices/index.tsx"],"names":["useState","useEffect","Web3","InterfaceRepository","rpcUrlGetterByNetwork","useServices","network","web3","setWeb3","interfaceRepo","setInterfaceRepo","rpcUrlGetter","Error","rpcUrl","process","env","REACT_APP_RPC_TOKEN","web3Instance"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAGA,OAAOC,mBAAP,MAAgC,uBAAhC;AAEA,SAASC,qBAAT,QAAsC,aAAtC;AAOA,eAAe,SAASC,WAAT,CAAqBC,OAArB,EAAkD;AAAA;;AAC/D,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,EAAhC;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,EAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACK,OAAL,EAAc;AACZ;AACD;;AAED,UAAMK,YAAY,GAAGP,qBAAqB,CAACE,OAAD,CAA1C;;AACA,QAAI,CAACK,YAAL,EAAmB;AACjB,YAAMC,KAAK,CAAE,mCAAkCN,OAAQ,EAA5C,CAAX;AACD;;AACD,UAAMO,MAAM,GAAGF,YAAY,CAACG,OAAO,CAACC,GAAR,CAAYC,mBAAb,CAA3B;AAEA,UAAMC,YAAY,GAAG,IAAIf,IAAJ,CAASW,MAAT,CAArB;AACA,UAAMJ,aAAa,GAAG,IAAIN,mBAAJ,CAAwBG,OAAxB,EAAiCW,YAAjC,CAAtB;AAEAT,IAAAA,OAAO,CAACS,YAAD,CAAP;AACAP,IAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACD,GAhBQ,EAgBN,CAACH,OAAD,CAhBM,CAAT;AAkBA,SAAO;AACLC,IAAAA,IADK;AAELE,IAAAA;AAFK,GAAP;AAID;;GA1BuBJ,W","sourcesContent":["import { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport { Networks } from '@gnosis.pm/safe-apps-sdk';\n\nimport InterfaceRepository from './interfaceRepository';\nimport { InterfaceRepo } from './interfaceRepository';\nimport { rpcUrlGetterByNetwork } from '../../utils';\n\nexport interface Services {\n  web3: Web3 | undefined;\n  interfaceRepo: InterfaceRepo | undefined;\n}\n\nexport default function useServices(network: Networks): Services {\n  const [web3, setWeb3] = useState<Web3 | undefined>();\n  const [interfaceRepo, setInterfaceRepo] = useState<InterfaceRepository | undefined>();\n\n  useEffect(() => {\n    if (!network) {\n      return;\n    }\n\n    const rpcUrlGetter = rpcUrlGetterByNetwork[network];\n    if (!rpcUrlGetter) {\n      throw Error(`RPC URL not defined for network ${network}`);\n    }\n    const rpcUrl = rpcUrlGetter(process.env.REACT_APP_RPC_TOKEN);\n\n    const web3Instance = new Web3(rpcUrl);\n    const interfaceRepo = new InterfaceRepository(network, web3Instance);\n\n    setWeb3(web3Instance);\n    setInterfaceRepo(interfaceRepo);\n  }, [network]);\n\n  return {\n    web3,\n    interfaceRepo,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}