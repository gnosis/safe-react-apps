{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mdastugu/Projects/safe-react-apps/apps/wallet-connect/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport jsQr from 'jsqr';\nimport styled from 'styled-components';\nimport format from 'date-fns/format';\nimport { TextField, Button, Text, Title, Icon, Loader } from '@gnosis.pm/safe-react-components';\nimport { blobToImageData } from './utils/images';\nimport { Wrapper } from './components/layout';\nimport WCClientInfo from './components/WCClientInfo';\nimport useWalletConnect from './hooks/useWalletConnect';\nconst StyledTitle = styled(Title)`\n  margin-top: 0;\n`;\n_c = StyledTitle;\nconst StyledText = styled(Text)`\n  margin-bottom: 8px;\n`;\n_c2 = StyledText;\nconst StyledParagraph = styled.div`\n  display:flex;\n  flex:1;\n`;\n_c3 = StyledParagraph;\nconst StyledHelpLink = styled.div`\n  display: flex;\n\n  > :first-of-type {\n    margin-right: 5px;\n  }\n`;\n_c4 = StyledHelpLink;\nconst WCContent = styled.div`\n  min-width: 400px;\n  margin-right: 20px;\n`;\n_c5 = WCContent;\n\nconst HelpLink = () => /*#__PURE__*/_jsxDEV(StyledHelpLink, {\n  children: [/*#__PURE__*/_jsxDEV(\"a\", {\n    target: \"_blank\",\n    href: \"https://help.gnosis-safe.io/en/articles/4356253-how-to-use-walletconnect-with-the-gnosis-safe-multisig\",\n    rel: \"noopener noreferrer\",\n    children: /*#__PURE__*/_jsxDEV(Text, {\n      color: \"primary\",\n      size: \"lg\",\n      children: \"How to use WalletConnect with the Gnosis Safe Multisig\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Icon, {\n    type: \"externalLink\",\n    color: \"primary\",\n    size: \"sm\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 40,\n  columnNumber: 3\n}, this);\n\n_c6 = HelpLink;\n\nconst ConnectedInstructions = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(StyledTitle, {\n    size: \"sm\",\n    children: \"How to confirm transactions\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(StyledText, {\n    size: \"lg\",\n    children: \"1) Trigger a transaction from the Dapp.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(StyledText, {\n    size: \"lg\",\n    children: \"2) Come back here to confirm the transaction. You will see a popup with transactions details. Review the details and submit the transaction.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(StyledText, {\n    size: \"lg\",\n    children: \"3) The transaction has to be confirmed be owners and executed just like any other Safe transaction.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(HelpLink, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this)]\n}, void 0, true);\n\n_c7 = ConnectedInstructions;\n\nconst DisconnectedInstructions = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(StyledTitle, {\n    size: \"sm\",\n    children: \"How to connect to a Dapp\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(StyledText, {\n    size: \"lg\",\n    children: \"1) Open a Dapp with WalletConnect support.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(StyledText, {\n    size: \"lg\",\n    children: \"2) Copy QR code image (Command+Control+Shift+4 on Mac, Windows key+PrtScn on Windows) or connection URI into clipboard.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(StyledText, {\n    size: \"lg\",\n    children: \"3) Paste QR code image or connection URI into the input field (Command+V on Mac, Ctrl+V on Windows)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(StyledText, {\n    size: \"lg\",\n    children: \"4) WalletConnect connection will be established automatically.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(StyledText, {\n    size: \"lg\",\n    children: \"5) Now you can trigger transactions via the Dapp to your Safe.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(HelpLink, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this)]\n}, void 0, true);\n\n_c8 = DisconnectedInstructions;\n\nconst App = () => {\n  _s();\n\n  const {\n    wcClientData,\n    wcConnect,\n    wcDisconnect\n  } = useWalletConnect();\n  const [inputValue, setInputValue] = useState('');\n  const [invalidQRCode, setInvalidQRCode] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const onPaste = React.useCallback(event => {\n    const connectWithUri = data => {\n      if (data.startsWith('wc:')) {\n        setIsConnecting(true);\n        wcConnect(data);\n      }\n    };\n\n    const connectWithQR = item => {\n      const blob = item.getAsFile();\n      const reader = new FileReader();\n\n      reader.onload = async event => {\n        var _event$target;\n\n        const imageData = await blobToImageData((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);\n        const code = jsQr(imageData.data, imageData.width, imageData.height);\n\n        if (code === null || code === void 0 ? void 0 : code.data) {\n          setIsConnecting(true);\n          wcConnect(code.data);\n        } else {\n          setInvalidQRCode(true);\n          setInputValue(`Screen Shot ${format(new Date(), 'yyyy-MM-dd')} at ${format(new Date(), 'hh.mm.ss')}`);\n        }\n      };\n\n      reader.readAsDataURL(blob);\n    };\n\n    setInvalidQRCode(false);\n    setInputValue('');\n\n    if (wcClientData) {\n      return;\n    }\n\n    const items = event.clipboardData.items;\n\n    for (const index in items) {\n      const item = items[index];\n\n      if (item.kind === 'string' && item.type === 'text/plain') {\n        connectWithUri(event.clipboardData.getData('Text'));\n      }\n\n      if (item.kind === 'file') {\n        connectWithQR(item);\n      }\n    }\n  }, [wcClientData, wcConnect]);\n\n  const getDisconnectedContent = () => {\n    if (isConnecting) {\n      return /*#__PURE__*/_jsxDEV(Loader, {\n        size: \"md\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"wc-uri\",\n      label: \"Paste WalletConnect QR code or connection URI\",\n      value: inputValue,\n      onChange: e => setInputValue(e.target.value),\n      onPaste: onPaste,\n      meta: {\n        error: invalidQRCode ? 'Invalid QR code' : undefined\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this);\n  };\n\n  const getConnectedContent = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(WCClientInfo, {\n      name: wcClientData.name,\n      url: wcClientData.url,\n      iconSrc: wcClientData.icons[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      size: \"md\",\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: () => wcDisconnect(),\n      children: \"Disconnect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true); // WalletConnect does not provide a loading/connecting status\n  // This effects simulates a connecting status, and prevents\n  // the user to initiate two connections in simultaneous.\n\n\n  useEffect(() => {\n    let interval;\n\n    if (isConnecting) {\n      interval = setTimeout(() => setIsConnecting(false), 2000);\n    }\n\n    return () => clearTimeout(interval);\n  }, [isConnecting]);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(StyledParagraph, {\n      children: /*#__PURE__*/_jsxDEV(StyledText, {\n        size: true,\n        children: \"Boquita campeon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WCContent, {\n      children: [/*#__PURE__*/_jsxDEV(StyledTitle, {\n        size: \"sm\",\n        children: \"Wallet Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), wcClientData ? getConnectedContent() : getDisconnectedContent()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: wcClientData ? /*#__PURE__*/_jsxDEV(ConnectedInstructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 28\n      }, this) : /*#__PURE__*/_jsxDEV(DisconnectedInstructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 56\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pFWNgXdjq1I2t4hdEWTsJXn4/9A=\", false, function () {\n  return [useWalletConnect];\n});\n\n_c9 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n\n$RefreshReg$(_c, \"StyledTitle\");\n$RefreshReg$(_c2, \"StyledText\");\n$RefreshReg$(_c3, \"StyledParagraph\");\n$RefreshReg$(_c4, \"StyledHelpLink\");\n$RefreshReg$(_c5, \"WCContent\");\n$RefreshReg$(_c6, \"HelpLink\");\n$RefreshReg$(_c7, \"ConnectedInstructions\");\n$RefreshReg$(_c8, \"DisconnectedInstructions\");\n$RefreshReg$(_c9, \"App\");","map":{"version":3,"sources":["/Users/mdastugu/Projects/safe-react-apps/apps/wallet-connect/src/App.tsx"],"names":["React","useState","useEffect","jsQr","styled","format","TextField","Button","Text","Title","Icon","Loader","blobToImageData","Wrapper","WCClientInfo","useWalletConnect","StyledTitle","StyledText","StyledParagraph","div","StyledHelpLink","WCContent","HelpLink","ConnectedInstructions","DisconnectedInstructions","App","wcClientData","wcConnect","wcDisconnect","inputValue","setInputValue","invalidQRCode","setInvalidQRCode","isConnecting","setIsConnecting","onPaste","useCallback","event","connectWithUri","data","startsWith","connectWithQR","item","blob","getAsFile","reader","FileReader","onload","imageData","target","result","code","width","height","Date","readAsDataURL","items","clipboardData","index","kind","type","getData","getDisconnectedContent","e","value","error","undefined","getConnectedContent","name","url","icons","interval","setTimeout","clearTimeout"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,IAA5B,EAAkCC,KAAlC,EAAyCC,IAAzC,EAA+CC,MAA/C,QAA6D,kCAA7D;AAEA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,gBAAP,MAA6B,0BAA7B;AAEA,MAAMC,WAAW,GAAGZ,MAAM,CAACK,KAAD,CAAQ;AAClC;AACA,CAFA;KAAMO,W;AAIN,MAAMC,UAAU,GAAGb,MAAM,CAACI,IAAD,CAAO;AAChC;AACA,CAFA;MAAMS,U;AAIN,MAAMC,eAAe,GAAGd,MAAM,CAACe,GAAI;AACnC;AACA;AACA,CAHA;MAAMD,e;AAKN,MAAME,cAAc,GAAGhB,MAAM,CAACe,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA,CANA;MAAMC,c;AAQN,MAAMC,SAAS,GAAGjB,MAAM,CAACe,GAAI;AAC7B;AACA;AACA,CAHA;MAAME,S;;AAKN,MAAMC,QAAQ,GAAG,mBACf,QAAC,cAAD;AAAA,0BACE;AACE,IAAA,MAAM,EAAC,QADT;AAEE,IAAA,IAAI,EAAC,wGAFP;AAGE,IAAA,GAAG,EAAC,qBAHN;AAAA,2BAKE,QAAC,IAAD;AAAM,MAAA,KAAK,EAAC,SAAZ;AAAsB,MAAA,IAAI,EAAC,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF,eAUE,QAAC,IAAD;AAAM,IAAA,IAAI,EAAC,cAAX;AAA0B,IAAA,KAAK,EAAC,SAAhC;AAA0C,IAAA,IAAI,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,UAVF;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;MAAMA,Q;;AAeN,MAAMC,qBAAqB,GAAG,mBAC5B;AAAA,0BACE,QAAC,WAAD;AAAa,IAAA,IAAI,EAAC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,eAGE,QAAC,UAAD;AAAY,IAAA,IAAI,EAAC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,eAKE,QAAC,UAAD;AAAY,IAAA,IAAI,EAAC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALF,eAUE,QAAC,UAAD;AAAY,IAAA,IAAI,EAAC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAVF,eAcE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,UAdF;AAAA,gBADF;;MAAMA,qB;;AAmBN,MAAMC,wBAAwB,GAAG,mBAC/B;AAAA,0BACE,QAAC,WAAD;AAAa,IAAA,IAAI,EAAC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,eAGE,QAAC,UAAD;AAAY,IAAA,IAAI,EAAC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,eAKE,QAAC,UAAD;AAAY,IAAA,IAAI,EAAC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALF,eAUE,QAAC,UAAD;AAAY,IAAA,IAAI,EAAC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAVF,eAcE,QAAC,UAAD;AAAY,IAAA,IAAI,EAAC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAdF,eAgBE,QAAC,UAAD;AAAY,IAAA,IAAI,EAAC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAhBF,eAkBE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,UAlBF;AAAA,gBADF;;MAAMA,wB;;AAuBN,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,SAAhB;AAA2BC,IAAAA;AAA3B,MAA4Cb,gBAAgB,EAAlE;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8B7B,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC8B,aAAD,EAAgBC,gBAAhB,IAAoC/B,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACgC,YAAD,EAAeC,eAAf,IAAkCjC,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAMkC,OAAO,GAAGnC,KAAK,CAACoC,WAAN,CACbC,KAAD,IAAiC;AAC/B,UAAMC,cAAc,GAAIC,IAAD,IAAkB;AACvC,UAAIA,IAAI,CAACC,UAAL,CAAgB,KAAhB,CAAJ,EAA4B;AAC1BN,QAAAA,eAAe,CAAC,IAAD,CAAf;AACAP,QAAAA,SAAS,CAACY,IAAD,CAAT;AACD;AACF,KALD;;AAOA,UAAME,aAAa,GAAIC,IAAD,IAA4B;AAChD,YAAMC,IAAI,GAAGD,IAAI,CAACE,SAAL,EAAb;AACA,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,MAAAA,MAAM,CAACE,MAAP,GAAgB,MAAOV,KAAP,IAA4C;AAAA;;AAC1D,cAAMW,SAAS,GAAG,MAAMpC,eAAe,kBAACyB,KAAK,CAACY,MAAP,kDAAC,cAAcC,MAAf,CAAvC;AACA,cAAMC,IAAI,GAAGhD,IAAI,CAAC6C,SAAS,CAACT,IAAX,EAAiBS,SAAS,CAACI,KAA3B,EAAkCJ,SAAS,CAACK,MAA5C,CAAjB;;AACA,YAAIF,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEZ,IAAV,EAAgB;AACdL,UAAAA,eAAe,CAAC,IAAD,CAAf;AACAP,UAAAA,SAAS,CAACwB,IAAI,CAACZ,IAAN,CAAT;AACD,SAHD,MAGO;AACLP,UAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAF,UAAAA,aAAa,CAAE,eAAczB,MAAM,CAAC,IAAIiD,IAAJ,EAAD,EAAa,YAAb,CAA2B,OAAMjD,MAAM,CAAC,IAAIiD,IAAJ,EAAD,EAAa,UAAb,CAAyB,EAAtF,CAAb;AACD;AACF,OAVD;;AAWAT,MAAAA,MAAM,CAACU,aAAP,CAAqBZ,IAArB;AACD,KAfD;;AAiBAX,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAF,IAAAA,aAAa,CAAC,EAAD,CAAb;;AAEA,QAAIJ,YAAJ,EAAkB;AAChB;AACD;;AAED,UAAM8B,KAAK,GAAGnB,KAAK,CAACoB,aAAN,CAAoBD,KAAlC;;AAEA,SAAK,MAAME,KAAX,IAAoBF,KAApB,EAA2B;AACzB,YAAMd,IAAI,GAAGc,KAAK,CAACE,KAAD,CAAlB;;AAEA,UAAIhB,IAAI,CAACiB,IAAL,KAAc,QAAd,IAA0BjB,IAAI,CAACkB,IAAL,KAAc,YAA5C,EAA0D;AACxDtB,QAAAA,cAAc,CAACD,KAAK,CAACoB,aAAN,CAAoBI,OAApB,CAA4B,MAA5B,CAAD,CAAd;AACD;;AAED,UAAInB,IAAI,CAACiB,IAAL,KAAc,MAAlB,EAA0B;AACxBlB,QAAAA,aAAa,CAACC,IAAD,CAAb;AACD;AACF;AACF,GA9Ca,EA+Cd,CAAChB,YAAD,EAAeC,SAAf,CA/Cc,CAAhB;;AAkDA,QAAMmC,sBAAsB,GAAG,MAAM;AACnC,QAAI7B,YAAJ,EAAkB;AAChB,0BAAO,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AACD,wBACE,QAAC,SAAD;AACE,MAAA,EAAE,EAAC,QADL;AAEE,MAAA,KAAK,EAAC,+CAFR;AAGE,MAAA,KAAK,EAAEJ,UAHT;AAIE,MAAA,QAAQ,EAAGkC,CAAD,IAAOjC,aAAa,CAACiC,CAAC,CAACd,MAAF,CAASe,KAAV,CAJhC;AAKE,MAAA,OAAO,EAAE7B,OALX;AAME,MAAA,IAAI,EAAE;AACJ8B,QAAAA,KAAK,EAAElC,aAAa,GAAG,iBAAH,GAAuBmC;AADvC;AANR;AAAA;AAAA;AAAA;AAAA,YADF;AAYD,GAhBD;;AAkBA,QAAMC,mBAAmB,GAAG,mBAC1B;AAAA,4BACE,QAAC,YAAD;AAAc,MAAA,IAAI,EAAEzC,YAAY,CAAE0C,IAAlC;AAAwC,MAAA,GAAG,EAAE1C,YAAY,CAAE2C,GAA3D;AAAgE,MAAA,OAAO,EAAE3C,YAAY,CAAE4C,KAAd,CAAoB,CAApB;AAAzE;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,IAAb;AAAkB,MAAA,KAAK,EAAC,SAAxB;AAAkC,MAAA,OAAO,EAAC,WAA1C;AAAsD,MAAA,OAAO,EAAE,MAAM1C,YAAY,EAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF,CA1EgB,CAoFhB;AACA;AACA;;;AACA1B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqE,QAAJ;;AACA,QAAItC,YAAJ,EAAkB;AAChBsC,MAAAA,QAAQ,GAAGC,UAAU,CAAC,MAAMtC,eAAe,CAAC,KAAD,CAAtB,EAA+B,IAA/B,CAArB;AACD;;AACD,WAAO,MAAMuC,YAAY,CAACF,QAAD,CAAzB;AACD,GANQ,EAMN,CAACtC,YAAD,CANM,CAAT;AAQA,sBACE,QAAC,OAAD;AAAA,4BAEE,QAAC,eAAD;AAAA,6BACE,QAAC,UAAD;AAAY,QAAA,IAAI,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE,QAAC,SAAD;AAAA,8BACE,QAAC,WAAD;AAAa,QAAA,IAAI,EAAC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGP,YAAY,GAAGyC,mBAAmB,EAAtB,GAA2BL,sBAAsB,EAFhE;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAWE;AAAA,gBAAMpC,YAAY,gBAAG,QAAC,qBAAD;AAAA;AAAA;AAAA;AAAA,cAAH,gBAA+B,QAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAjD;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CA9GD;;GAAMD,G;UAC8CV,gB;;;MAD9CU,G;AAgHN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport jsQr from 'jsqr';\nimport styled from 'styled-components';\nimport format from 'date-fns/format';\n\nimport { TextField, Button, Text, Title, Icon, Loader } from '@gnosis.pm/safe-react-components';\n\nimport { blobToImageData } from './utils/images';\nimport { Wrapper } from './components/layout';\nimport WCClientInfo from './components/WCClientInfo';\nimport useWalletConnect from './hooks/useWalletConnect';\n\nconst StyledTitle = styled(Title)`\n  margin-top: 0;\n`;\n\nconst StyledText = styled(Text)`\n  margin-bottom: 8px;\n`;\n\nconst StyledParagraph = styled.div`\n  display:flex;\n  flex:1;\n`;\n\nconst StyledHelpLink = styled.div`\n  display: flex;\n\n  > :first-of-type {\n    margin-right: 5px;\n  }\n`;\n\nconst WCContent = styled.div`\n  min-width: 400px;\n  margin-right: 20px;\n`;\n\nconst HelpLink = () => (\n  <StyledHelpLink>\n    <a\n      target=\"_blank\"\n      href=\"https://help.gnosis-safe.io/en/articles/4356253-how-to-use-walletconnect-with-the-gnosis-safe-multisig\"\n      rel=\"noopener noreferrer\"\n    >\n      <Text color=\"primary\" size=\"lg\">\n        How to use WalletConnect with the Gnosis Safe Multisig\n      </Text>\n    </a>\n    <Icon type=\"externalLink\" color=\"primary\" size=\"sm\" />\n  </StyledHelpLink>\n);\n\nconst ConnectedInstructions = () => (\n  <>\n    <StyledTitle size=\"sm\">How to confirm transactions</StyledTitle>\n\n    <StyledText size=\"lg\">1) Trigger a transaction from the Dapp.</StyledText>\n\n    <StyledText size=\"lg\">\n      2) Come back here to confirm the transaction. You will see a popup with transactions details. Review the details\n      and submit the transaction.\n    </StyledText>\n\n    <StyledText size=\"lg\">\n      3) The transaction has to be confirmed be owners and executed just like any other Safe transaction.\n    </StyledText>\n\n    <HelpLink />\n  </>\n);\n\nconst DisconnectedInstructions = () => (\n  <>\n    <StyledTitle size=\"sm\">How to connect to a Dapp</StyledTitle>\n\n    <StyledText size=\"lg\">1) Open a Dapp with WalletConnect support.</StyledText>\n\n    <StyledText size=\"lg\">\n      2) Copy QR code image (Command+Control+Shift+4 on Mac, Windows key+PrtScn on Windows) or connection URI into\n      clipboard.\n    </StyledText>\n\n    <StyledText size=\"lg\">\n      3) Paste QR code image or connection URI into the input field (Command+V on Mac, Ctrl+V on Windows)\n    </StyledText>\n\n    <StyledText size=\"lg\">4) WalletConnect connection will be established automatically.</StyledText>\n\n    <StyledText size=\"lg\">5) Now you can trigger transactions via the Dapp to your Safe.</StyledText>\n\n    <HelpLink />\n  </>\n);\n\nconst App = () => {\n  const { wcClientData, wcConnect, wcDisconnect } = useWalletConnect();\n  const [inputValue, setInputValue] = useState('');\n  const [invalidQRCode, setInvalidQRCode] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const onPaste = React.useCallback(\n    (event: React.ClipboardEvent) => {\n      const connectWithUri = (data: string) => {\n        if (data.startsWith('wc:')) {\n          setIsConnecting(true);\n          wcConnect(data);\n        }\n      };\n\n      const connectWithQR = (item: DataTransferItem) => {\n        const blob = item.getAsFile();\n        const reader = new FileReader();\n        reader.onload = async (event: ProgressEvent<FileReader>) => {\n          const imageData = await blobToImageData(event.target?.result as string);\n          const code = jsQr(imageData.data, imageData.width, imageData.height);\n          if (code?.data) {\n            setIsConnecting(true);\n            wcConnect(code.data);\n          } else {\n            setInvalidQRCode(true);\n            setInputValue(`Screen Shot ${format(new Date(), 'yyyy-MM-dd')} at ${format(new Date(), 'hh.mm.ss')}`);\n          }\n        };\n        reader.readAsDataURL(blob as Blob);\n      };\n\n      setInvalidQRCode(false);\n      setInputValue('');\n\n      if (wcClientData) {\n        return;\n      }\n\n      const items = event.clipboardData.items;\n\n      for (const index in items) {\n        const item = items[index];\n\n        if (item.kind === 'string' && item.type === 'text/plain') {\n          connectWithUri(event.clipboardData.getData('Text'));\n        }\n\n        if (item.kind === 'file') {\n          connectWithQR(item);\n        }\n      }\n    },\n    [wcClientData, wcConnect],\n  );\n\n  const getDisconnectedContent = () => {\n    if (isConnecting) {\n      return <Loader size=\"md\" />;\n    }\n    return (\n      <TextField\n        id=\"wc-uri\"\n        label=\"Paste WalletConnect QR code or connection URI\"\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n        onPaste={onPaste}\n        meta={{\n          error: invalidQRCode ? 'Invalid QR code' : undefined,\n        }}\n      />\n    );\n  };\n\n  const getConnectedContent = () => (\n    <>\n      <WCClientInfo name={wcClientData!.name} url={wcClientData!.url} iconSrc={wcClientData!.icons[0]} />\n\n      <Button size=\"md\" color=\"primary\" variant=\"contained\" onClick={() => wcDisconnect()}>\n        Disconnect\n      </Button>\n    </>\n  );\n\n  // WalletConnect does not provide a loading/connecting status\n  // This effects simulates a connecting status, and prevents\n  // the user to initiate two connections in simultaneous.\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isConnecting) {\n      interval = setTimeout(() => setIsConnecting(false), 2_000);\n    }\n    return () => clearTimeout(interval);\n  }, [isConnecting]);\n\n  return (\n    <Wrapper>\n      {/* WalletConnect */}\n      <StyledParagraph>\n        <StyledText size>Boquita campeon</StyledText>\n        </StyledParagraph>\n      <WCContent>\n        <StyledTitle size=\"sm\">Wallet Connect</StyledTitle>\n        {wcClientData ? getConnectedContent() : getDisconnectedContent()}\n      </WCContent>\n\n      {/* Instructions */}\n      <div>{wcClientData ? <ConnectedInstructions /> : <DisconnectedInstructions />}</div>\n    </Wrapper>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}