{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n};\n\nvar _communicator;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Eth = void 0;\n\nconst constants_1 = require(\"../eth/constants\");\n\nconst methods_1 = require(\"../communication/methods\");\n\nconst inputFormatters = {\n  defaultBlockParam: (arg = 'latest') => arg,\n  returnFullTxObjectParam: (arg = false) => arg,\n  blockNumberToHex: arg => Number.isInteger(arg) ? `0x${arg.toString(16)}` : arg\n};\n\nclass Eth {\n  constructor(communicator) {\n    _communicator.set(this, void 0);\n\n    __classPrivateFieldSet(this, _communicator, communicator);\n\n    this.call = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getBalance = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getCode = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getStorageAt = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam]\n    });\n    this.getPastLogs = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getLogs\n    });\n    this.getBlockByHash = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getBlockByNumber = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getTransactionByHash = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionByHash\n    });\n    this.getTransactionReceipt = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionReceipt\n    });\n  }\n\n  buildRequest({\n    call,\n    formatters\n  }) {\n    return params => __awaiter(this, void 0, void 0, function* () {\n      if (formatters && Array.isArray(params)) {\n        formatters.forEach((formatter, i) => {\n          if (formatter) {\n            params[i] = formatter(params[i]);\n          }\n        });\n      }\n\n      const payload = {\n        call,\n        params\n      };\n      const response = yield __classPrivateFieldGet(this, _communicator).send(methods_1.METHODS.rpcCall, payload);\n\n      if (!response.success) {\n        throw new Error(response.error);\n      }\n\n      return response.data;\n    });\n  }\n\n}\n\nexports.Eth = Eth;\n_communicator = new WeakMap();","map":{"version":3,"sources":["../../../src/eth/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _communicator;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Eth = void 0;\nconst constants_1 = require(\"../eth/constants\");\nconst methods_1 = require(\"../communication/methods\");\nconst inputFormatters = {\n    defaultBlockParam: (arg = 'latest') => arg,\n    returnFullTxObjectParam: (arg = false) => arg,\n    blockNumberToHex: (arg) => Number.isInteger(arg) ? `0x${arg.toString(16)}` : arg,\n};\nclass Eth {\n    constructor(communicator) {\n        _communicator.set(this, void 0);\n        __classPrivateFieldSet(this, _communicator, communicator);\n        this.call = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_call,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getBalance = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBalance,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getCode = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getCode,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getStorageAt = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getStorageAt,\n            formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam],\n        });\n        this.getPastLogs = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getLogs,\n        });\n        this.getBlockByHash = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBlockByHash,\n            formatters: [null, inputFormatters.returnFullTxObjectParam],\n        });\n        this.getBlockByNumber = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBlockByNumber,\n            formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam],\n        });\n        this.getTransactionByHash = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getTransactionByHash,\n        });\n        this.getTransactionReceipt = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getTransactionReceipt,\n        });\n    }\n    buildRequest({ call, formatters }) {\n        return (params) => __awaiter(this, void 0, void 0, function* () {\n            if (formatters && Array.isArray(params)) {\n                formatters.forEach((formatter, i) => {\n                    if (formatter) {\n                        params[i] = formatter(params[i]);\n                    }\n                });\n            }\n            const payload = {\n                call,\n                params,\n            };\n            const response = yield __classPrivateFieldGet(this, _communicator).send(methods_1.METHODS.rpcCall, payload);\n            if (!response.success) {\n                throw new Error(response.error);\n            }\n            return response.data;\n        });\n    }\n}\nexports.Eth = Eth;\n_communicator = new WeakMap();\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}