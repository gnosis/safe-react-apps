{"ast":null,"code":"const blobToImageData = async blob => {\n  return new Promise((resolve, reject) => {\n    let img = new Image();\n    img.src = blob;\n\n    img.onload = () => resolve(img);\n\n    img.onerror = err => reject(err);\n  }).then(img => {\n    let canvas = document.createElement('canvas');\n    canvas.width = img.width;\n    canvas.height = img.height;\n    let ctx = canvas.getContext('2d');\n    if (!ctx) throw new Error('Could not generate context from canvas');\n    ctx.drawImage(img, 0, 0);\n    return ctx.getImageData(0, 0, img.width, img.height); // some browsers synchronously decode image here\n  });\n};\n\nexport { blobToImageData };","map":{"version":3,"sources":["/Users/mdastugu/Projects/safe-react-apps/apps/wallet-connect/src/utils/images.ts"],"names":["blobToImageData","blob","Promise","resolve","reject","img","Image","src","onload","onerror","err","then","canvas","document","createElement","width","height","ctx","getContext","Error","drawImage","getImageData"],"mappings":"AAAA,MAAMA,eAAe,GAAG,MAAOC,IAAP,IAAwB;AAC9C,SAAO,IAAIC,OAAJ,CAA8B,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACxD,QAAIC,GAAG,GAAG,IAAIC,KAAJ,EAAV;AACAD,IAAAA,GAAG,CAACE,GAAJ,GAAUN,IAAV;;AACAI,IAAAA,GAAG,CAACG,MAAJ,GAAa,MAAML,OAAO,CAACE,GAAD,CAA1B;;AACAA,IAAAA,GAAG,CAACI,OAAJ,GAAeC,GAAD,IAASN,MAAM,CAACM,GAAD,CAA7B;AACD,GALM,EAKJC,IALI,CAKEN,GAAD,IAAS;AACf,QAAIO,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACAF,IAAAA,MAAM,CAACG,KAAP,GAAeV,GAAG,CAACU,KAAnB;AACAH,IAAAA,MAAM,CAACI,MAAP,GAAgBX,GAAG,CAACW,MAApB;AACA,QAAIC,GAAG,GAAGL,MAAM,CAACM,UAAP,CAAkB,IAAlB,CAAV;AAEA,QAAI,CAACD,GAAL,EAAU,MAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AAEVF,IAAAA,GAAG,CAACG,SAAJ,CAAcf,GAAd,EAAmB,CAAnB,EAAsB,CAAtB;AACA,WAAOY,GAAG,CAACI,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuBhB,GAAG,CAACU,KAA3B,EAAkCV,GAAG,CAACW,MAAtC,CAAP,CATe,CASuC;AACvD,GAfM,CAAP;AAgBD,CAjBD;;AAmBA,SAAShB,eAAT","sourcesContent":["const blobToImageData = async (blob: string) => {\n  return new Promise<HTMLImageElement>((resolve, reject) => {\n    let img = new Image();\n    img.src = blob;\n    img.onload = () => resolve(img);\n    img.onerror = (err) => reject(err);\n  }).then((img) => {\n    let canvas = document.createElement('canvas');\n    canvas.width = img.width;\n    canvas.height = img.height;\n    let ctx = canvas.getContext('2d');\n\n    if (!ctx) throw new Error('Could not generate context from canvas');\n\n    ctx.drawImage(img, 0, 0);\n    return ctx.getImageData(0, 0, img.width, img.height); // some browsers synchronously decode image here\n  });\n};\n\nexport { blobToImageData };\n"]},"metadata":{},"sourceType":"module"}