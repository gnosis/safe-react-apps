import React from 'react';
import { ThemeColors, ThemeIconSize } from '../../theme';
declare const icons: {
    add: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    addressBook: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    addressBookAdd: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    alert: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    allowances: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    apps: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    arrowDown: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    assets: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    awaitingConfirmations: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    camera: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    chain: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    check: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    circleCheck: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    circleCross: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    circleDropdown: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    code: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    collectibles: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    copy: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    cross: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    currency: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    delete: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    devicePassword: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    edit: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    error: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    eth: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    externalLink: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    eye: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    eyeOff: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    filledCross: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    fingerPrint: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    fuelIndicator: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    getInTouch: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    home: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    info: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    knowledge: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    licenses: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    loadSafe: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    locked: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    mobileConfirm: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    noInternet: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    owners: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    paste: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    paymentToken: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    privacyPolicy: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    qrCode: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    question: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    rateApp: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    received: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    recover: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    replaceOwner: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    requiredConfirmations: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    restricted: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    resync: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    rocket: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    scan: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    search: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    sendAgain: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    sent: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    serverError: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    settings: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    settingsChange: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    settingsTool: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    share: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    termsOfUse: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    transactionsInactive: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    unlocked: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    userEdit: {
        sm: JSX.Element;
        md: JSX.Element;
    };
    wallet: {
        sm: JSX.Element;
        md: JSX.Element;
    };
};
export declare type IconType = typeof icons;
export declare type IconTypes = keyof IconType;
declare type Props = {
    type: IconTypes;
    size: ThemeIconSize;
    color?: ThemeColors;
    tooltip?: string;
    className?: string;
};
/**
 * The `Icon` renders an icon, it can be one already defined specified by
 * the type props or custom one using the customUrl.
 */
export declare const Icon: ({ type, size, color, tooltip, className, }: Props) => React.ReactElement;
export {};
