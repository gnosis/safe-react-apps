name: Deploy Dev/Master

# Run on pushes to dev/master
on:
  push:
    branches:
      - master
      - development
env:
  REPO_NAME_SLUG: safe-react-apps

jobs:
  deploy:
    name: Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Remove broken apt repos [Ubuntu]
        if: ${{ matrix.os }} == 'ubuntu-latest'
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done

      - uses: actions/checkout@v2

      - name: Node.js setup
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Env dependencies setup
        run: |
          sudo apt-get update
          sudo apt-get -y install python3-pip python3-dev
          pip install awscli --upgrade --user

      - name: Project dependencies setup, node version ${{ matrix.node-version }}
        run: |
          # If you have dependencies from git (wc app), yarn may randomly throw an error about invalid cache
          # This approach is taken from https://github.com/yarnpkg/yarn/issues/7212#issuecomment-506155894 to fix the issue
          # Another approach is to install with flag --network-concurrency 1, but this will make the installation pretty slow (default value is 8)
          mkdir .yarncache
          yarn install --cache-folder ./.yarncache --frozen-lockfile
          rm -rf .yarncache
          yarn cache clean

      - name: Build apps
        run: npx lerna run build
        env:
          REACT_APP_RPC_TOKEN: ${{ secrets.REACT_APP_RPC_TOKEN }}

      - name: 'Deploy to S3: Develop'
        run: bash ./scripts/deploy_to_s3_bucket.sh
        if: github.ref == 'refs/heads/development'
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          BUCKET_NAME: ${{ secrets.AWS_DEV_BUCKET_NAME }}

      - name: 'Deploy to S3: Staging'
        run: bash ./scripts/deploy_to_s3_bucket.sh
        if: github.ref == 'refs/heads/master'
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          BUCKET_NAME: ${{ secrets.STAGING_BUCKET_NAME }}
