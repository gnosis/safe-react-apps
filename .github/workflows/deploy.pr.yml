name: Deploy PR

# Run on pull request
on: pull_request

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

    steps:
      - name: Remove broken apt repos [Ubuntu]
        if: matrix.os == 'ubuntu-latest'
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done

      - uses: actions/checkout@v2

      - name: Setup dependencies ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: |
          sudo apt-get update
          sudo apt-get -y install python3-pip python3-dev
          pip install awscli --upgrade --user
          # If you have dependencies from git (wc app), yarn may randomly throw an error about invalid cache
          # This approach is taken from https://github.com/yarnpkg/yarn/issues/7212#issuecomment-506155894 to fix the issue
          # Another approach is to install with flag --network-concurrency 1, but this will make the installation pretty slow (default value is 8)
          mkdir .yarncache
          yarn install --cache-folder ./.yarncache --frozen-lockfile
          rm -rf .yarncache
          yarn cache clean
      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Build apps
        run: npx lerna run build

  deploy:
    name: Deploy PR
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout to the repo
        uses: actions/checkout@v2

      - name: Get PR number
        uses: jwalton/gh-find-current-pr@v1.0.2
        id: findPr
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: echo "Your PR is ${PR} or ${PR2} or ${PR3}"
        env:
          PR: ${{ steps.findPr.outputs.number }}
          PR2: ${{ steps.findPr.outputs.pr }}
          PR3: ${{ github.event.number }}

      - run: bash ./scripts/deploy_pr.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

      - name: 'PRaul: Comment PR with app URLs'
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            * ** [Compound app](${{ env.REVIEW_FEATURE_URL }}/compound/)**
            * ** [WalletConnect app](${{ env.REVIEW_FEATURE_URL }}/wallet-connect/)**
            * ** [Tx Builder App](${{ env.REVIEW_FEATURE_URL }}/tx-builder/)**
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          allow-repeats: true
        if: success() && steps.findPr.outputs.number
        env:
          REVIEW_FEATURE_URL: https://pr${{ steps.findPr.outputs.number }}--${{ env.REPO_NAME_SLUG }}.review.gnosisdev.com

  # build:
  #   name: Build apps
  #   needs: setup
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 12

  #     - name: Load dependencies
  #       id: cache-node-modules
  #       uses: actions/cache@v2
  #       with:
  #         path: node_modules
  #         key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

  #     - name: Build Web Apps
  #       run: yarn build

  #     - name: Get PR number
  #       uses: jwalton/gh-find-current-pr@v1
  #       id: findPr
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}

  #     - uses: mshick/add-pr-comment@v1
  #       with:
  #         message: |
  #           * **ðŸ”­ [Explorer Dapp](${{ env.REVIEW_FEATURE_URL }})**: Explorer test app
  #           * **ðŸ“ˆ [Trade Dapp](${{ env.REVIEW_FEATURE_URL }}/trade.html)**: Trade test app
  #           * **ðŸ“š [Storybook](${{ env.REVIEW_FEATURE_URL }}/storybook/)**: Component stories
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}
  #         repo-token-user-login: 'github-actions[bot]'
  #         if: success() && steps.findPr.outputs.number
  #       env:
  #         REVIEW_FEATURE_URL: https://pr${{ steps.findPr.outputs.number }}--${{ env.REPO_NAME_SLUG }}.review.gnosisdev.com

  #     - name: Upload websites artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: website
  #         path: dist

  # deploy:
  #   name: Deploy
  #   needs: [build, storybook]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Download website
  #       uses: actions/download-artifact@v2

  #     - name: Move storybook inside dist
  #       run: mv storybook website/storybook

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: 'Deploy to S3: PRaul'
  #       if: success() && steps.findPr.outputs.number
  #       run: aws s3 sync website s3://${{ secrets.AWS_REVIEW_BUCKET_NAME }}/${{ env.REPO_NAME_SLUG }}/pr${{ steps.findPr.outputs.number }} --delete

  #     - name: 'PRaul: Comment PR with app URLs'
  #       uses: mshick/add-pr-comment@v1
  #       with:
  #         message: |
  #           * **ðŸ”­ [Explorer Dapp](${{ env.REVIEW_FEATURE_URL }})**: Explorer test app
  #           * **ðŸ“ˆ [Trade Dapp](${{ env.REVIEW_FEATURE_URL }}/trade.html)**: Trade test app
  #           * **ðŸ“š [Storybook](${{ env.REVIEW_FEATURE_URL }}/storybook/)**: Component stories
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}
  #         repo-token-user-login: 'github-actions[bot]'
  #       if: success() && steps.findPr.outputs.number
  #       env:
  #         REVIEW_FEATURE_URL: https://pr${{ steps.findPr.outputs.number }}--${{ env.REPO_NAME_SLUG }}.review.gnosisdev.com

  #     - name: 'Deploy to S3: Develop'
  #       if: github.ref == 'refs/heads/develop'
  #       run: aws s3 sync website s3://${{ secrets.AWS_DEV_BUCKET_NAME }} --delete

  #     - name: 'Deploy to S3: Staging'
  #       if: github.ref == 'refs/heads/master'
  #       run: aws s3 sync website s3://${{ secrets.AWS_STAGING_BUCKET_NAME }}/current --delete
